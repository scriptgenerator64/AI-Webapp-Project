"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Send, RefreshCw } from "lucide-react"
import type { Organization } from "@/types/document-types"
import { mockAIConversation } from "@/lib/mock-data"
import AIMessage from "@/components/ai-message"

interface AskAIPanelProps {
  selectedOrgs: string[]
  organizations: Organization[]
}

export default function AskAIPanel({ selectedOrgs, organizations }: AskAIPanelProps) {
  const [question, setQuestion] = useState("")
  const [conversation, setConversation] = useState(mockAIConversation)

  // Get selected organization names for display
  const selectedOrgNames = organizations
    .filter((org) => selectedOrgs.includes(org.id))
    .map((org) => org.name)
    .join(", ")

  // Handle question submission (mock)
  const handleSubmit = () => {
    if (!question.trim()) return

    // Add user message
    const newConversation = [
      ...conversation,
      {
        id: `user-${Date.now()}`,
        role: "user" as const,
        content: question,
        timestamp: new Date().toISOString(),
      },
    ]

    setConversation(newConversation)
    setQuestion("")

    // Simulate AI response after a short delay
    setTimeout(() => {
      setConversation((prev) => [
        ...prev,
        {
          id: `ai-${Date.now()}`,
          role: "assistant" as const,
          content:
            "This is a simulated AI response to your question. In a real implementation, this would be generated by an AI model based on the content of the selected documents.",
          timestamp: new Date().toISOString(),
          sources: [
            {
              id: "doc-1",
              name: "Annual Report 2023.pdf",
              excerpt: "This is a relevant excerpt from the document that supports the AI's response.",
              relevance: 0.92,
            },
            {
              id: "doc-2",
              name: "Project Proposal.docx",
              excerpt: "Another supporting excerpt from a different document.",
              relevance: 0.85,
            },
          ],
        },
      ])
    }, 1000)
  }

  // Clear conversation
  const handleClear = () => {
    setConversation([])
  }

  return (
    <div className="flex-1 bg-white dark:bg-gray-800 flex flex-col">
      <div className="p-4 border-b">
        <h2 className="font-semibold">Ask AI</h2>
        <p className="text-sm text-muted-foreground">
          Searching documents from: {selectedOrgNames || "No organizations selected"}
        </p>
      </div>

      <ScrollArea className="flex-1 p-4">
        <div className="max-w-3xl mx-auto space-y-6">
          {conversation.length > 0 ? (
            conversation.map((message) => <AIMessage key={message.id} message={message} />)
          ) : (
            <div className="text-center py-12">
              <h3 className="text-lg font-medium mb-2">Ask questions about your documents</h3>
              <p className="text-muted-foreground mb-4">
                The AI will search through your selected documents and provide answers with relevant sources.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 max-w-lg mx-auto">
                <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">"What were our Q1 financial results?"</div>
                <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
                  "Summarize the latest project proposal"
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      <div className="p-4 border-t">
        <div className="max-w-3xl mx-auto flex gap-2">
          <Textarea
            placeholder="Ask a question about your documents..."
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            className="resize-none"
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault()
                handleSubmit()
              }
            }}
          />
          <div className="flex flex-col gap-2">
            <Button onClick={handleSubmit} disabled={!question.trim()}>
              <Send className="h-4 w-4" />
            </Button>
            <Button variant="outline" onClick={handleClear}>
              <RefreshCw className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}
